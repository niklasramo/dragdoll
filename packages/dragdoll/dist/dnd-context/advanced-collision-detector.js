import{getStyle as e}from"../get-style-e3zfxW9-.js";import{isDocument as t}from"../is-document-BqbrfopC.js";import{getIntersectionRect as n,getIntersectionScore as r}from"../get-intersection-score-nMuj0vta.js";import{getRect as i}from"../get-rect-rpTuZ8DC.js";import{CollisionDetector as a,createRect as o}from"../collision-detector-DNLDdjWK.js";const s=`visible`;function c(n,r,i=[]){let a=r?n:n?.parentNode;for(i.length=0;a&&!t(a);)if(a instanceof Element){let t=e(a);t.overflowY===s||t.overflowX===s||i.push(a),a=a.parentNode}else a=a instanceof ShadowRoot?a.host:a.parentNode;return i.push(window),i}let l;const u=o(),d={width:2**53-1,height:2**53-1,x:(2**53-1)*-.5,y:(2**53-1)*-.5},f=[],p=[],m=[],h=[];function g(e){if(!f.length){let t=e.drag?.items?.[0]?.dragContainer;t?c(t,!0,f):f.push(window)}}function _(e){p.length||c(e.element,!1,p)}function v(e,t=o()){o(e.length?i([e[0],`padding`],window):d,t);for(let r=1;r<e.length;r++){let a=e[r];if(!n(t,i([a,`padding`],window),t)){o(u,t);break}}return t}var y=class extends a{constructor(e,t){super(e),this._dragStates=new Map,this._visibilityLogic=t?.visibilityLogic||`relative`,this._listenersAttached=!1,this._clearCache=()=>this.clearCache()}_checkCollision(e,t,i){let a=this._dragStates.get(e);if(!a)return null;let s=e.getClientRect(),c=t.getClientRect();if(!s||!c)return null;let u=a.clipMaskKeyMap.get(t);if(!u){let n=this._visibilityLogic===`relative`;if(p.length=0,m.length=0,h.length=0,_(t),u=p[0]||window,a.clipMaskKeyMap.set(t,u),!a.clipMaskMap.has(u)){if(g(e),n){let e=window;for(let t of p)if(f.includes(t)){e=t;break}for(let t of f){if(t===e)break;m.push(t)}for(let t of p){if(t===e)break;h.push(t)}}else m.push(...f),h.push(...p);let t=n||!l?v(m):o(l),r=v(h);!n&&!l&&(l=t),a.clipMaskMap.set(u,[t,r])}p.length=0,m.length=0,h.length=0}let[d,y]=a.clipMaskMap.get(u)||[];if(!d||!y||!n(s,d,i.draggableVisibleRect)||!n(c,y,i.droppableVisibleRect)||!n(i.draggableVisibleRect,i.droppableVisibleRect,i.intersectionRect))return null;let b=r(i.draggableVisibleRect,i.droppableVisibleRect,i.intersectionRect);return b<=0?null:(i.droppableId=t.id,o(c,i.droppableRect),o(s,i.draggableRect),i.intersectionScore=b,i)}_sortCollisions(e,t){return t.sort((e,t)=>{let n=t.intersectionScore-e.intersectionScore;return n===0?e.droppableVisibleRect.width*e.droppableVisibleRect.height-t.droppableVisibleRect.width*t.droppableVisibleRect.height:n})}_createCollisionData(){let e=super._createCollisionData();return e.droppableVisibleRect=o(),e.draggableVisibleRect=o(),e}_getDragState(e){let t=this._dragStates.get(e);return t||(t={clipMaskKeyMap:new Map,clipMaskMap:new Map,cacheDirty:!0},this._dragStates.set(e,t),this._listenersAttached||=(window.addEventListener(`scroll`,this._clearCache,{capture:!0,passive:!0}),window.addEventListener(`resize`,this._clearCache,{passive:!0}),!0),t)}getCollisionDataPool(e){return this._getDragState(e),super.getCollisionDataPool(e)}removeCollisionDataPool(e){this._dragStates.delete(e)&&this._dndContext.drags.size<=0&&(this._listenersAttached&&=(window.removeEventListener(`scroll`,this._clearCache,{capture:!0}),window.removeEventListener(`resize`,this._clearCache),!1)),super.removeCollisionDataPool(e)}detectCollisions(e,t,n){f.length=0,l=null;let r=this._getDragState(e);r.cacheDirty&&=(r.clipMaskKeyMap.clear(),r.clipMaskMap.clear(),!1),super.detectCollisions(e,t,n),f.length=0,l=null}clearCache(e){if(e){let t=this._dragStates.get(e);t&&(t.cacheDirty=!0)}else this._dragStates.forEach(e=>{e.cacheDirty=!0})}};export{y as AdvancedCollisionDetector};
//# sourceMappingURL=advanced-collision-detector.js.map