{"version":3,"file":"base-sensor-cUrlV0_m.js","names":[],"sources":["../src/sensors/base-sensor.ts"],"sourcesContent":["import type { EventListenerId, Events } from 'eventti';\nimport { Emitter } from 'eventti';\nimport type { Writeable } from '../types.js';\nimport type { Sensor, SensorEvents } from './sensor.js';\nimport { SensorEventType } from './sensor.js';\n\nexport interface BaseSensorDragData {\n  readonly x: number;\n  readonly y: number;\n}\n\nexport class BaseSensor<E extends SensorEvents = SensorEvents> implements Sensor<E> {\n  declare _events_type: E;\n  readonly drag: BaseSensorDragData | null;\n  readonly isDestroyed: boolean;\n  protected _emitter: Emitter<Events>;\n\n  constructor() {\n    this.drag = null;\n    this.isDestroyed = false;\n    this._emitter = new Emitter();\n  }\n\n  protected _createDragData(data: E['start']): BaseSensorDragData {\n    return {\n      x: data.x,\n      y: data.y,\n    };\n  }\n\n  protected _updateDragData(data: E['move'] | E['end'] | E['cancel']) {\n    if (!this.drag) return;\n    (this.drag.x as Writeable<number>) = data.x;\n    (this.drag.y as Writeable<number>) = data.y;\n  }\n\n  protected _resetDragData() {\n    (this as Writeable<this>).drag = null;\n  }\n\n  protected _start(data: E['start']) {\n    if (this.isDestroyed || this.drag) return;\n    (this as Writeable<this>).drag = this._createDragData(data);\n    this._emitter.emit(SensorEventType.Start, data);\n  }\n\n  protected _move(data: E['move']) {\n    if (!this.drag) return;\n    this._updateDragData(data);\n    this._emitter.emit(SensorEventType.Move, data);\n  }\n\n  protected _end(data: E['end']) {\n    if (!this.drag) return;\n    this._updateDragData(data);\n    this._emitter.emit(SensorEventType.End, data);\n    this._resetDragData();\n  }\n\n  protected _cancel(data: E['cancel']) {\n    if (!this.drag) return;\n    this._updateDragData(data);\n    this._emitter.emit(SensorEventType.Cancel, data);\n    this._resetDragData();\n  }\n\n  on<T extends keyof E>(\n    type: T,\n    listener: (e: E[T]) => void,\n    listenerId?: EventListenerId,\n  ): EventListenerId {\n    return this._emitter.on(type, listener, listenerId);\n  }\n\n  off<T extends keyof E>(type: T, listenerId: EventListenerId): void {\n    this._emitter.off(type, listenerId);\n  }\n\n  cancel() {\n    if (!this.drag) return;\n    this._cancel({\n      type: SensorEventType.Cancel,\n      x: this.drag.x,\n      y: this.drag.y,\n    } as E['cancel']);\n  }\n\n  destroy() {\n    if (this.isDestroyed) return;\n    (this as Writeable<this>).isDestroyed = true;\n    this.cancel();\n    this._emitter.emit(SensorEventType.Destroy, {\n      type: SensorEventType.Destroy,\n    });\n    this._emitter.off();\n  }\n}\n"],"mappings":"yFAWA,IAAa,EAAb,KAAoF,CAMlF,aAAc,CACZ,KAAK,KAAO,KACZ,KAAK,YAAc,GACnB,KAAK,SAAW,IAAI,EAGtB,gBAA0B,EAAsC,CAC9D,MAAO,CACL,EAAG,EAAK,EACR,EAAG,EAAK,EACT,CAGH,gBAA0B,EAA0C,CAC7D,KAAK,OACT,KAAK,KAAK,EAA0B,EAAK,EACzC,KAAK,KAAK,EAA0B,EAAK,GAG5C,gBAA2B,CACxB,KAAyB,KAAO,KAGnC,OAAiB,EAAkB,CAC7B,KAAK,aAAe,KAAK,OAC5B,KAAyB,KAAO,KAAK,gBAAgB,EAAK,CAC3D,KAAK,SAAS,KAAK,EAAgB,MAAO,EAAK,EAGjD,MAAgB,EAAiB,CAC1B,KAAK,OACV,KAAK,gBAAgB,EAAK,CAC1B,KAAK,SAAS,KAAK,EAAgB,KAAM,EAAK,EAGhD,KAAe,EAAgB,CACxB,KAAK,OACV,KAAK,gBAAgB,EAAK,CAC1B,KAAK,SAAS,KAAK,EAAgB,IAAK,EAAK,CAC7C,KAAK,gBAAgB,EAGvB,QAAkB,EAAmB,CAC9B,KAAK,OACV,KAAK,gBAAgB,EAAK,CAC1B,KAAK,SAAS,KAAK,EAAgB,OAAQ,EAAK,CAChD,KAAK,gBAAgB,EAGvB,GACE,EACA,EACA,EACiB,CACjB,OAAO,KAAK,SAAS,GAAG,EAAM,EAAU,EAAW,CAGrD,IAAuB,EAAS,EAAmC,CACjE,KAAK,SAAS,IAAI,EAAM,EAAW,CAGrC,QAAS,CACF,KAAK,MACV,KAAK,QAAQ,CACX,KAAM,EAAgB,OACtB,EAAG,KAAK,KAAK,EACb,EAAG,KAAK,KAAK,EACd,CAAgB,CAGnB,SAAU,CACJ,KAAK,cACR,KAAyB,YAAc,GACxC,KAAK,QAAQ,CACb,KAAK,SAAS,KAAK,EAAgB,QAAS,CAC1C,KAAM,EAAgB,QACvB,CAAC,CACF,KAAK,SAAS,KAAK"}