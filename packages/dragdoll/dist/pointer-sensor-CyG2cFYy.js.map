{"version":3,"file":"pointer-sensor-CyG2cFYy.js","names":["dragData: PointerSensorDragData","eventData: PointerSensorStartEvent","eventData: PointerSensorMoveEvent","eventData: PointerSensorCancelEvent","eventData: PointerSensorEndEvent"],"sources":["../src/utils/get-pointer-event-data.ts","../src/utils/get-pointer-id.ts","../src/utils/get-pointer-type.ts","../src/utils/parse-listener-options.ts","../src/utils/parse-source-events.ts","../src/sensors/pointer-sensor.ts"],"sourcesContent":["export function getPointerEventData(\n  e: PointerEvent | TouchEvent | MouseEvent,\n  id: number,\n): PointerEvent | MouseEvent | Touch | null {\n  // If we have a pointer event return the whole event if there's a match, and\n  // null otherwise.\n  if ('pointerId' in e) {\n    return e.pointerId === id ? e : null;\n  }\n\n  // For touch events let's check if there's a changed touch object that matches\n  // the pointerId in which case return the touch object.\n  if ('changedTouches' in e) {\n    let i = 0;\n    for (; i < e.changedTouches.length; i++) {\n      if (e.changedTouches[i].identifier === id) {\n        return e.changedTouches[i];\n      }\n    }\n    return null;\n  }\n\n  // For mouse/other events let's assume there's only one pointer and just\n  // return the event.\n  return e;\n}\n","export function getPointerId(e: PointerEvent | TouchEvent | MouseEvent) {\n  // If we have pointer id available let's use it.\n  if ('pointerId' in e) return e.pointerId;\n  // For touch events let's get the first changed touch's identifier.\n  if ('changedTouches' in e) return e.changedTouches[0] ? e.changedTouches[0].identifier : null;\n  // For mouse/other events let's provide a static id. And let's make it a\n  // negative number so it has it has not chance of clashing with touch/pointer\n  // ids.\n  return -1;\n}\n","import type { PointerType } from '../types.js';\n\nexport function getPointerType(e: PointerEvent | TouchEvent | MouseEvent): PointerType {\n  return 'pointerType' in e ? (e.pointerType as PointerType) : 'touches' in e ? 'touch' : 'mouse';\n}\n","import type { ListenerOptions } from '../types.js';\n\nexport function parseListenerOptions(options: ListenerOptions = {}): ListenerOptions {\n  const { capture = true, passive = true } = options;\n  return { capture, passive };\n}\n","import { HAS_POINTER_EVENTS, HAS_TOUCH_EVENTS } from '../constants.js';\n\nexport function parseSourceEvents(\n  sourceEvents: 'pointer' | 'touch' | 'mouse' | 'auto' | undefined,\n): 'pointer' | 'touch' | 'mouse' {\n  return sourceEvents === 'auto' || sourceEvents === undefined\n    ? HAS_POINTER_EVENTS\n      ? 'pointer'\n      : HAS_TOUCH_EVENTS\n        ? 'touch'\n        : 'mouse'\n    : sourceEvents;\n}\n","import type { EventListenerId, Events } from 'eventti';\nimport { Emitter } from 'eventti';\nimport type { ListenerOptions, PointerType, Writeable } from '../types.js';\nimport { getPointerEventData } from '../utils/get-pointer-event-data.js';\nimport { getPointerId } from '../utils/get-pointer-id.js';\nimport { getPointerType } from '../utils/get-pointer-type.js';\nimport { parseListenerOptions } from '../utils/parse-listener-options.js';\nimport { parseSourceEvents } from '../utils/parse-source-events.js';\nimport type {\n  Sensor,\n  SensorCancelEvent,\n  SensorDestroyEvent,\n  SensorEndEvent,\n  SensorMoveEvent,\n  SensorStartEvent,\n} from './sensor.js';\nimport { SensorEventType } from './sensor.js';\n\nconst POINTER_EVENTS = {\n  start: 'pointerdown',\n  move: 'pointermove',\n  cancel: 'pointercancel',\n  end: 'pointerup',\n} as const;\n\nconst TOUCH_EVENTS = {\n  start: 'touchstart',\n  move: 'touchmove',\n  cancel: 'touchcancel',\n  end: 'touchend',\n} as const;\n\nconst MOUSE_EVENTS = {\n  start: 'mousedown',\n  move: 'mousemove',\n  cancel: '',\n  end: 'mouseup',\n} as const;\n\nconst SOURCE_EVENTS = {\n  pointer: POINTER_EVENTS,\n  touch: TOUCH_EVENTS,\n  mouse: MOUSE_EVENTS,\n} as const;\n\ntype PointerSensorSourceEvent = PointerEvent | TouchEvent | MouseEvent;\n\nexport type PointerSensorDragData = {\n  readonly pointerId: number;\n  readonly pointerType: PointerType;\n  readonly x: number;\n  readonly y: number;\n};\n\nexport interface PointerSensorSettings {\n  listenerOptions: ListenerOptions;\n  sourceEvents: keyof typeof SOURCE_EVENTS | 'auto';\n  startPredicate: (e: PointerSensorSourceEvent) => boolean;\n}\n\nexport interface PointerSensorStartEvent extends SensorStartEvent {\n  pointerId: number;\n  pointerType: PointerType;\n  srcEvent: PointerSensorSourceEvent;\n  target: EventTarget | null;\n}\n\nexport interface PointerSensorMoveEvent extends SensorMoveEvent {\n  pointerId: number;\n  pointerType: PointerType;\n  srcEvent: PointerSensorSourceEvent;\n  target: EventTarget | null;\n}\n\nexport interface PointerSensorCancelEvent extends SensorCancelEvent {\n  pointerId: number;\n  pointerType: PointerType;\n  srcEvent: PointerSensorSourceEvent | null;\n  target: EventTarget | null;\n}\n\nexport interface PointerSensorEndEvent extends SensorEndEvent {\n  pointerId: number;\n  pointerType: PointerType;\n  srcEvent: PointerSensorSourceEvent | null;\n  target: EventTarget | null;\n}\n\nexport interface PointerSensorDestroyEvent extends SensorDestroyEvent {}\n\nexport interface PointerSensorEvents {\n  start: PointerSensorStartEvent;\n  move: PointerSensorMoveEvent;\n  cancel: PointerSensorCancelEvent;\n  end: PointerSensorEndEvent;\n  destroy: PointerSensorDestroyEvent;\n}\n\nexport class PointerSensor<E extends PointerSensorEvents = PointerSensorEvents>\n  implements Sensor<E>\n{\n  declare _events_type: E;\n\n  /**\n   * The observed element or window.\n   */\n  readonly element: Element | Window;\n\n  /**\n   * Current drag data, null if drag is not active.\n   */\n  readonly drag: PointerSensorDragData | null;\n\n  /**\n   * Indicator if the instance is destroyed.\n   */\n  readonly isDestroyed: boolean;\n\n  /**\n   * The options object to be used for `addEventListener`.\n   */\n  protected _startPredicate: (e: PointerSensorSourceEvent) => boolean;\n\n  /**\n   * The options object to be used for `addEventListener`.\n   */\n  protected _listenerOptions: ListenerOptions;\n\n  /**\n   * Type of tracked source events.\n   */\n  protected _sourceEvents: keyof typeof SOURCE_EVENTS;\n\n  /**\n   * Indicator if window's listener's are bound.\n   */\n  protected _areWindowListenersBound: boolean;\n\n  /**\n   * Internal event emitter instance.\n   */\n  protected _emitter: Emitter<Events>;\n\n  constructor(element: Element | Window, options: Partial<PointerSensorSettings> = {}) {\n    const {\n      listenerOptions = {},\n      sourceEvents = 'auto',\n      startPredicate = (e) => ('button' in e && e.button > 0 ? false : true),\n    } = options;\n\n    this.element = element;\n    this.drag = null;\n    this.isDestroyed = false;\n\n    this._areWindowListenersBound = false;\n    this._startPredicate = startPredicate;\n    this._listenerOptions = parseListenerOptions(listenerOptions);\n    this._sourceEvents = parseSourceEvents(sourceEvents);\n    this._emitter = new Emitter();\n\n    this._onStart = this._onStart.bind(this);\n    this._onMove = this._onMove.bind(this);\n    this._onCancel = this._onCancel.bind(this);\n    this._onEnd = this._onEnd.bind(this);\n\n    // Listen to start event.\n    element.addEventListener(\n      SOURCE_EVENTS[this._sourceEvents].start,\n      this._onStart as EventListener,\n      this._listenerOptions,\n    );\n  }\n\n  /**\n   * Check if the provided event contains the tracked pointer id or in the case\n   * of touch event if the first changed touch is the tracked touch object and\n   * return the event or touch object. Otherwise return null.\n   */\n  protected _getTrackedPointerEventData(\n    e: PointerSensorSourceEvent,\n  ): PointerEvent | MouseEvent | Touch | null {\n    return this.drag ? getPointerEventData(e, this.drag.pointerId) : null;\n  }\n\n  /**\n   * Listener for start event.\n   */\n  protected _onStart(e: PointerSensorSourceEvent) {\n    if (this.isDestroyed || this.drag) return;\n\n    // Make sure start predicate is fulfilled.\n    if (!this._startPredicate(e)) return;\n\n    // Try to get pointer id.\n    const pointerId = getPointerId(e);\n    if (pointerId === null) return;\n\n    // Try to get pointer.\n    const pointerEventData = getPointerEventData(e, pointerId);\n    if (pointerEventData === null) return;\n\n    // Create drag data.\n    const dragData: PointerSensorDragData = {\n      pointerId,\n      pointerType: getPointerType(e),\n      x: pointerEventData.clientX,\n      y: pointerEventData.clientY,\n    };\n\n    // Set drag data.\n    (this as Writeable<this>).drag = dragData;\n\n    // Emit start event.\n    const eventData: PointerSensorStartEvent = {\n      ...dragData,\n      type: SensorEventType.Start,\n      srcEvent: e,\n      target: pointerEventData.target,\n    };\n    this._emitter.emit(eventData.type, eventData);\n\n    // If the drag procedure was not reset within the start procedure let's\n    // activate the instance (start listening to move/cancel/end events).\n    if (this.drag) {\n      this._bindWindowListeners();\n    }\n  }\n\n  /**\n   * Listener for move event.\n   */\n  protected _onMove(e: PointerSensorSourceEvent) {\n    if (!this.drag) return;\n\n    const pointerEventData = this._getTrackedPointerEventData(e);\n    if (!pointerEventData) return;\n\n    (this.drag.x as Writeable<number>) = pointerEventData.clientX;\n    (this.drag.y as Writeable<number>) = pointerEventData.clientY;\n\n    const eventData: PointerSensorMoveEvent = {\n      type: SensorEventType.Move,\n      srcEvent: e,\n      target: pointerEventData.target,\n      ...this.drag,\n    };\n\n    this._emitter.emit(eventData.type, eventData);\n  }\n\n  /**\n   * Listener for cancel event.\n   */\n  protected _onCancel(e: PointerEvent | TouchEvent) {\n    if (!this.drag) return;\n\n    const pointerEventData = this._getTrackedPointerEventData(e);\n    if (!pointerEventData) return;\n\n    (this.drag.x as Writeable<number>) = pointerEventData.clientX;\n    (this.drag.y as Writeable<number>) = pointerEventData.clientY;\n\n    const eventData: PointerSensorCancelEvent = {\n      type: SensorEventType.Cancel,\n      srcEvent: e,\n      target: pointerEventData.target,\n      ...this.drag,\n    };\n\n    this._emitter.emit(eventData.type, eventData);\n\n    this._resetDrag();\n  }\n\n  /**\n   * Listener for end event.\n   */\n  protected _onEnd(e: PointerSensorSourceEvent) {\n    if (!this.drag) return;\n\n    const pointerEventData = this._getTrackedPointerEventData(e);\n    if (!pointerEventData) return;\n\n    (this.drag.x as Writeable<number>) = pointerEventData.clientX;\n    (this.drag.y as Writeable<number>) = pointerEventData.clientY;\n\n    const eventData: PointerSensorEndEvent = {\n      type: SensorEventType.End,\n      srcEvent: e,\n      target: pointerEventData.target,\n      ...this.drag,\n    };\n\n    this._emitter.emit(eventData.type, eventData);\n\n    this._resetDrag();\n  }\n\n  /**\n   * Bind window event listeners for move/end/cancel.\n   */\n  protected _bindWindowListeners() {\n    if (this._areWindowListenersBound) return;\n    const { move, end, cancel } = SOURCE_EVENTS[this._sourceEvents];\n    window.addEventListener(move, this._onMove, this._listenerOptions);\n    window.addEventListener(end, this._onEnd, this._listenerOptions);\n    if (cancel) {\n      window.addEventListener(cancel, this._onCancel, this._listenerOptions);\n    }\n    this._areWindowListenersBound = true;\n  }\n\n  /**\n   * Unbind window event listeners for move/end/cancel.\n   */\n  protected _unbindWindowListeners() {\n    if (this._areWindowListenersBound) {\n      const { move, end, cancel } = SOURCE_EVENTS[this._sourceEvents];\n      window.removeEventListener(move, this._onMove, this._listenerOptions);\n      window.removeEventListener(end, this._onEnd, this._listenerOptions);\n      if (cancel) {\n        window.removeEventListener(cancel, this._onCancel, this._listenerOptions);\n      }\n      this._areWindowListenersBound = false;\n    }\n  }\n\n  /**\n   * Reset drag data.\n   */\n  protected _resetDrag() {\n    (this as Writeable<this>).drag = null;\n    this._unbindWindowListeners();\n  }\n\n  /**\n   * Forcefully cancel the drag process.\n   */\n  cancel() {\n    if (!this.drag) return;\n\n    const eventData: PointerSensorCancelEvent = {\n      type: SensorEventType.Cancel,\n      srcEvent: null,\n      target: null,\n      ...this.drag,\n    };\n\n    this._emitter.emit(eventData.type, eventData);\n\n    this._resetDrag();\n  }\n\n  /**\n   * Update the instance's settings.\n   */\n  updateSettings(options: Partial<PointerSensorSettings>) {\n    if (this.isDestroyed) return;\n\n    const { listenerOptions, sourceEvents, startPredicate } = options;\n    const nextSourceEvents = parseSourceEvents(sourceEvents);\n    const nextListenerOptions = parseListenerOptions(listenerOptions);\n\n    // Update start predicate if needed.\n    if (startPredicate && this._startPredicate !== startPredicate) {\n      this._startPredicate = startPredicate;\n    }\n\n    // Update listener options and/or source events if needed.\n    if (\n      (listenerOptions &&\n        (this._listenerOptions.capture !== nextListenerOptions.capture ||\n          this._listenerOptions.passive === nextListenerOptions.passive)) ||\n      (sourceEvents && this._sourceEvents !== nextSourceEvents)\n    ) {\n      // Unbind start listener.\n      this.element.removeEventListener(\n        SOURCE_EVENTS[this._sourceEvents].start,\n        this._onStart as EventListener,\n        this._listenerOptions,\n      );\n\n      // Unbind window listeners.\n      this._unbindWindowListeners();\n\n      // Cancel current drag process.\n      this.cancel();\n\n      // Update options to instace.\n      if (sourceEvents) {\n        this._sourceEvents = nextSourceEvents;\n      }\n      if (listenerOptions && nextListenerOptions) {\n        this._listenerOptions = nextListenerOptions;\n      }\n\n      // Rebind start listener with new options.\n      this.element.addEventListener(\n        SOURCE_EVENTS[this._sourceEvents].start,\n        this._onStart as EventListener,\n        this._listenerOptions,\n      );\n    }\n  }\n\n  /**\n   * Bind a drag event listener.\n   */\n  on<T extends keyof E>(\n    type: T,\n    listener: (e: E[T]) => void,\n    listenerId?: EventListenerId,\n  ): EventListenerId {\n    return this._emitter.on(type, listener, listenerId);\n  }\n\n  /**\n   * Unbind a drag event listener.\n   */\n  off<T extends keyof E>(type: T, listenerId: EventListenerId): void {\n    this._emitter.off(type, listenerId);\n  }\n\n  /**\n   * Destroy the instance and unbind all drag event listeners.\n   */\n  destroy() {\n    if (this.isDestroyed) return;\n\n    // Mark as destroyed.\n    (this as Writeable<this>).isDestroyed = true;\n\n    // Cancel any ongoing drag process.\n    this.cancel();\n\n    // Emit destroy event.\n    this._emitter.emit(SensorEventType.Destroy, {\n      type: SensorEventType.Destroy,\n    });\n\n    // Destroy emitter.\n    this._emitter.off();\n\n    // Unbind start event listeners.\n    this.element.removeEventListener(\n      SOURCE_EVENTS[this._sourceEvents].start,\n      this._onStart as EventListener,\n      this._listenerOptions,\n    );\n  }\n}\n"],"mappings":"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"}