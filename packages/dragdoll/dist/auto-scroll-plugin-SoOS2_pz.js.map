{"version":3,"file":"auto-scroll-plugin-SoOS2_pz.js","names":["AUTOSCROLL_POSITION: Point","AUTOSCROLL_CLIENT_RECT: Rect"],"sources":["../src/draggable/plugins/auto-scroll-plugin.ts"],"sourcesContent":["import type {\n  AutoScrollItem,\n  AutoScrollItemEventCallback,\n  AutoScrollItemSpeedCallback,\n  AutoScrollItemTarget,\n} from '../../auto-scroll/auto-scroll.js';\nimport { autoScrollSmoothSpeed } from '../../auto-scroll/auto-scroll.js';\nimport type { Sensor } from '../../sensors/sensor.js';\nimport { autoScroll } from '../../singletons/auto-scroll.js';\nimport type { Point, Rect, Writeable } from '../../types.js';\nimport type { Draggable, DraggablePluginMap } from '../draggable.js';\nimport { DraggableEventType } from '../draggable.js';\n\nconst AUTOSCROLL_POSITION: Point = { x: 0, y: 0 };\n\nconst AUTOSCROLL_CLIENT_RECT: Rect = {\n  width: 0,\n  height: 0,\n  x: 0,\n  y: 0,\n};\n\nfunction getDefaultSettings<S extends Sensor[], E extends S[number]['_events_type']>() {\n  return {\n    targets: [],\n    inertAreaSize: 0.2,\n    speed: autoScrollSmoothSpeed(),\n    smoothStop: false,\n    getPosition: (draggable: Draggable<S, E>) => {\n      const { drag } = draggable;\n      const primaryItem = drag?.items[0];\n\n      // Try to use the first item for the autoscroll data.\n      if (primaryItem) {\n        return primaryItem.position;\n      }\n\n      // Fallback to the sensor's clientX/clientY values.\n      const e = drag && (drag.moveEvent || drag.startEvent);\n      AUTOSCROLL_POSITION.x = e ? e.x : 0;\n      AUTOSCROLL_POSITION.y = e ? e.y : 0;\n      return AUTOSCROLL_POSITION;\n    },\n    getClientRect: (draggable: Draggable<S, E>) => {\n      const { drag } = draggable;\n\n      // Try to use the default draggable client rect.\n      const clientRect = draggable.getClientRect();\n      if (clientRect) return clientRect;\n\n      // Fallback to the sensor's clientX/clientY values and a static size of\n      // 50x50px.\n      const e = drag && (drag.moveEvent || drag.startEvent);\n      AUTOSCROLL_CLIENT_RECT.width = e ? 50 : 0;\n      AUTOSCROLL_CLIENT_RECT.height = e ? 50 : 0;\n      AUTOSCROLL_CLIENT_RECT.x = e ? e.x - 25 : 0;\n      AUTOSCROLL_CLIENT_RECT.y = e ? e.y - 25 : 0;\n      return AUTOSCROLL_CLIENT_RECT;\n    },\n    onStart: null,\n    onStop: null,\n  };\n}\n\nclass DraggableAutoScrollProxy<S extends Sensor[], E extends S[number]['_events_type']>\n  implements AutoScrollItem\n{\n  protected _draggableAutoScroll: DraggableAutoScroll<S, E>;\n  protected _draggable: Draggable<S, E>;\n  protected _position: AutoScrollItem['position'];\n  protected _clientRect: AutoScrollItem['clientRect'];\n\n  constructor(draggableAutoScroll: DraggableAutoScroll<S, E>, draggable: Draggable<S, E>) {\n    this._draggableAutoScroll = draggableAutoScroll;\n    this._draggable = draggable;\n    this._position = { x: 0, y: 0 };\n    this._clientRect = { width: 0, height: 0, x: 0, y: 0 };\n  }\n\n  protected _getSettings() {\n    return this._draggableAutoScroll.settings;\n  }\n\n  get targets() {\n    let { targets } = this._getSettings();\n    if (typeof targets === 'function') {\n      targets = targets(this._draggable);\n    }\n    return targets;\n  }\n\n  get position() {\n    const position = this._position;\n    const { getPosition } = this._getSettings();\n    if (typeof getPosition === 'function') {\n      Object.assign(position, getPosition(this._draggable));\n    } else {\n      position.x = 0;\n      position.y = 0;\n    }\n    return position;\n  }\n\n  get clientRect() {\n    const rect = this._clientRect;\n    const { getClientRect } = this._getSettings();\n    if (typeof getClientRect === 'function') {\n      Object.assign(rect, getClientRect(this._draggable));\n    } else {\n      rect.width = 0;\n      rect.height = 0;\n      rect.x = 0;\n      rect.y = 0;\n    }\n    return rect;\n  }\n\n  get inertAreaSize() {\n    return this._getSettings().inertAreaSize;\n  }\n\n  get smoothStop() {\n    return this._getSettings().smoothStop;\n  }\n\n  get speed() {\n    return this._getSettings().speed;\n  }\n\n  get onStart() {\n    return this._getSettings().onStart;\n  }\n\n  get onStop() {\n    return this._getSettings().onStop;\n  }\n}\n\nexport interface DraggableAutoScrollSettings<\n  S extends Sensor[],\n  E extends S[number]['_events_type'],\n> {\n  targets: AutoScrollItemTarget[] | ((draggable: Draggable<S, E>) => AutoScrollItemTarget[]);\n  inertAreaSize: number;\n  speed: number | AutoScrollItemSpeedCallback;\n  smoothStop: boolean;\n  getPosition: ((draggable: Draggable<S, E>) => Point) | null;\n  getClientRect: ((draggable: Draggable<S, E>) => Rect) | null;\n  onStart: AutoScrollItemEventCallback | null;\n  onStop: AutoScrollItemEventCallback | null;\n}\n\nexport type DraggableAutoScrollOptions<\n  S extends Sensor[],\n  E extends S[number]['_events_type'],\n> = Partial<DraggableAutoScrollSettings<S, E>>;\n\nexport class DraggableAutoScroll<\n  S extends Sensor[] = Sensor[],\n  E extends S[number]['_events_type'] = S[number]['_events_type'],\n> {\n  readonly name: 'autoscroll';\n  readonly version: string;\n  readonly settings: DraggableAutoScrollSettings<S, E>;\n  protected _autoScrollProxy: DraggableAutoScrollProxy<S, E> | null;\n\n  constructor(draggable: Draggable<S, E>, options: DraggableAutoScrollOptions<S, E> = {}) {\n    this.name = 'autoscroll';\n    this.version = '0.0.3';\n    this.settings = this._parseSettings(options);\n    this._autoScrollProxy = null;\n\n    draggable.on(DraggableEventType.Start, () => {\n      if (!this._autoScrollProxy) {\n        this._autoScrollProxy = new DraggableAutoScrollProxy(this, draggable);\n        autoScroll.addItem(this._autoScrollProxy);\n      }\n    });\n\n    draggable.on(DraggableEventType.End, () => {\n      if (this._autoScrollProxy) {\n        autoScroll.removeItem(this._autoScrollProxy);\n        this._autoScrollProxy = null;\n      }\n    });\n  }\n\n  protected _parseSettings(\n    options?: Partial<this['settings']>,\n    defaults: this['settings'] = getDefaultSettings(),\n  ): this['settings'] {\n    const {\n      targets = defaults.targets,\n      inertAreaSize = defaults.inertAreaSize,\n      speed = defaults.speed,\n      smoothStop = defaults.smoothStop,\n      getPosition = defaults.getPosition,\n      getClientRect = defaults.getClientRect,\n      onStart = defaults.onStart,\n      onStop = defaults.onStop,\n    } = options || {};\n\n    return {\n      targets,\n      inertAreaSize,\n      speed,\n      smoothStop,\n      getPosition,\n      getClientRect,\n      onStart,\n      onStop,\n    };\n  }\n\n  updateSettings(options: Partial<this['settings']> = {}) {\n    (this as Writeable<this>).settings = this._parseSettings(options, this.settings);\n  }\n}\n\nexport function autoScrollPlugin<\n  S extends Sensor[],\n  E extends S[number]['_events_type'],\n  P extends DraggablePluginMap,\n>(options?: DraggableAutoScrollOptions<S, E>) {\n  return (draggable: Draggable<S, E, P>) => {\n    const p = new DraggableAutoScroll(draggable, options);\n    const d = draggable as typeof draggable & {\n      plugins: { [p.name]: typeof p };\n    };\n    d.plugins[p.name] = p;\n    return d;\n  };\n}\n"],"mappings":"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"}