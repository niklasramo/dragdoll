import{_ as a,c as r,o as t,ag as o}from"./chunks/framework.CfSSalEU.js";const h=JSON.parse('{"title":"What is DragDoll?","description":"","frontmatter":{},"headers":[],"relativePath":"index.md","filePath":"index.md","lastUpdated":1759608617000}'),s={name:"index.md"};function n(i,e,l,d,g,p){return t(),r("div",null,[...e[0]||(e[0]=[o('<h1 id="what-is-dragdoll" tabindex="-1">What is DragDoll? <a class="header-anchor" href="#what-is-dragdoll" aria-label="Permalink to &quot;What is DragDoll?&quot;">​</a></h1><p>DragDoll is a modular and highly extensible drag and drop system written in TypeScript. Originally based on <a href="https://muuri.dev/" target="_blank" rel="noreferrer">Muuri</a>&#39;s internal drag system, it has been fully redesigned to serve as a general-purpose drag and drop system.</p><p>At its core, DragDoll is built on the concept of <a href="/dragdoll/sensor.html"><em>sensors</em></a>, which are responsible for listening to user input events (or any events, for that matter) and emitting drag events based on those inputs. While DragDoll comes with a few built-in sensors, you can also create your own to listen to any kind of input events you desire.</p><p>To actually move elements around, DragDoll provides the <a href="/dragdoll/draggable.html"><code>Draggable</code></a> class. This class acts as an orchestrator for any number of sensors and moves DOM elements based on the drag events emitted by the provided sensors. The <a href="/dragdoll/draggable.html"><code>Draggable</code></a> class features a simple and functional API that allows you to control the drag process explicitly from start to finish.</p><p>For complete drag and drop experiences, DragDoll also provides <a href="/dragdoll/dnd-context.html"><code>DndContext</code></a> and <a href="/dragdoll/droppable.html"><code>Droppable</code></a> classes, which handle collision detection between draggable elements and drop targets. Together, these three classes create a powerful foundation for building sophisticated drag and drop interfaces.</p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><p>📡   <strong>Sweet Sensors</strong>: A well-documented and extendable Sensor system that normalizes any input into unified drag events, giving you complete control over user interactions.</p><p>🤏   <strong>Dynamic Draggables</strong>: A highly customizable and pluggable Draggable system with autoscrolling superpowers, making complex drag-and-drop scenarios effortless.</p><p>🎯   <strong>Precise Collisions</strong>: Advanced collision detection system that efficiently determines drop targets and provides rich interaction data for creating intuitive drag and drop experiences.</p><p>🪄   <strong>Magical Transforms</strong>: Finally, transformed (2D) elements can be dragged normally. Rotate, scale, skew, and translate to your heart&#39;s content without limitations.</p><p>🧘   <strong>Blissful DX</strong>: Experience a seamless developer experience with strong typing, smart defaults, and pre-baked solutions for common use cases.</p><p>🍦   <strong>Vanilla Flavour</strong>: No frameworks were abused while writing this library. It&#39;s all vanilla framework-free TypeScript down to the core.</p><p>💝   <strong>Free &amp; Open Source</strong>: 100% MIT licensed, spread the love.</p><h2 id="roadmap" tabindex="-1">Roadmap <a class="header-anchor" href="#roadmap" aria-label="Permalink to &quot;Roadmap&quot;">​</a></h2><ul><li><p><strong>Utilizing Native Drag and Drop</strong>: By not using the native HTML Drag and Drop API, DragDoll misses out on crucial features like file drag-and-drop and dragging items between different windows. It&#39;s still a bit unclear how to integrate the native API with DragDoll in a clear and ergonomic way, but figuring this out is a high priority for us.</p></li><li><p><strong>Guides &amp; Plugins</strong>: We&#39;re working on a few guides and plugins for common and more advanced use cases that will make DragDoll even more powerful.</p></li></ul>',15)])])}const u=a(s,[["render",n]]);export{h as __pageData,u as default};
