{"version":3,"file":"sensor-TzqXogk2.js","names":[],"sources":["../src/sensors/sensor.ts"],"sourcesContent":["import type { EventListenerId } from 'eventti';\n\nexport const SensorEventType = {\n  Start: 'start',\n  Move: 'move',\n  Cancel: 'cancel',\n  End: 'end',\n  Destroy: 'destroy',\n} as const;\n\nexport type SensorEventType = (typeof SensorEventType)[keyof typeof SensorEventType];\n\nexport interface SensorStartEvent {\n  type: typeof SensorEventType.Start;\n  x: number;\n  y: number;\n}\n\nexport interface SensorMoveEvent {\n  type: typeof SensorEventType.Move;\n  x: number;\n  y: number;\n}\n\nexport interface SensorCancelEvent {\n  type: typeof SensorEventType.Cancel;\n  x: number;\n  y: number;\n}\n\nexport interface SensorEndEvent {\n  type: typeof SensorEventType.End;\n  x: number;\n  y: number;\n}\n\nexport interface SensorDestroyEvent {\n  type: typeof SensorEventType.Destroy;\n}\n\nexport interface SensorEvents {\n  start: SensorStartEvent;\n  move: SensorMoveEvent;\n  cancel: SensorCancelEvent;\n  end: SensorEndEvent;\n  destroy: SensorDestroyEvent;\n}\n\nexport abstract class Sensor<E extends SensorEvents = SensorEvents> {\n  declare _events_type: E;\n  abstract on<T extends keyof E>(\n    type: T,\n    listener: (eventData: E[T]) => void,\n    listenerId?: EventListenerId,\n  ): EventListenerId;\n  abstract off<T extends keyof E>(type: T, listenerId: EventListenerId): void;\n  abstract cancel(): void;\n  abstract destroy(): void;\n}\n"],"mappings":"AAEA,MAAa,EAAkB,CAC7B,MAAO,QACP,KAAM,OACN,OAAQ,SACR,IAAK,MACL,QAAS,UACV,CAwCD,IAAsB,EAAtB,KAAoE"}